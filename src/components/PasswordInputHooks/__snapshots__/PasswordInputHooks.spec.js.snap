// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the PasswordInput component should match the last mount snapshot with msg 1`] = `
<PasswordInputHooks
  error="some error just happened"
  htmlId="password-input-example-all-features"
  label="Password"
  maxLength={50}
  name="password"
  onChange={[Function]}
  showVisibilityToggle={true}
  value="blablabla"
>
  <TextInput
    error="some error just happened"
    htmlId="password-input-example-all-features"
    iconSuffix={
      <EyeIcon
        onClick={[Function]}
        style={
          Object {
            "height": "1em",
            "position": "absolute",
            "right": "5px",
            "top": "50%",
            "transform": "translateY(-50%)",
            "width": "1em",
          }
        }
      />
    }
    label="Password"
    maxLength={50}
    name="password"
    onChange={[Function]}
    required={true}
    type="password"
    value="blablabla"
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": true,
              "lastClassName": "bWEju",
              "rules": Array [
                "
  margin-bottom: 0.5em;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-bwzfXH bWEju"
        >
          <Label
            htmlFor="password-input-example-all-features"
            label="Password"
            required={true}
          >
            <label
              htmlFor="password-input-example-all-features"
              style={
                Object {
                  "display": "block",
                }
              }
            >
              Password
               
              <span
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                 *
              </span>
            </label>
          </Label>
          <span
            style={
              Object {
                "display": "inline-block",
                "position": "relative",
              }
            }
          >
            <styled.input
              id="password-input-example-all-features"
              maxLength={50}
              name="password"
              onChange={[Function]}
              style={
                Object {
                  "border": "solid 1px red",
                }
              }
              type="password"
              value="blablabla"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": true,
                      "lastClassName": "cjqezQ",
                      "rules": Array [
                        "
  border: 2px solid #b4b4b4;
  padding: 0.75em 0.5em;
  border-radius: 0.25em;
  width: 100%;
  box-sizing: border-box;
  max-width: 25em;
  &:focus {
    outline: 0;
    border-color: #5066c2;
    box-shadow: 0 0 0.3125em 0.125em rgba(80, 102, 194, 0.5);
  }
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="password-input-example-all-features"
                maxLength={50}
                name="password"
                onChange={[Function]}
                style={
                  Object {
                    "border": "solid 1px red",
                  }
                }
                type="password"
                value="blablabla"
              >
                <input
                  className="sc-bdVaJa cjqezQ"
                  id="password-input-example-all-features"
                  maxLength={50}
                  name="password"
                  onChange={[Function]}
                  style={
                    Object {
                      "border": "solid 1px red",
                    }
                  }
                  type="password"
                  value="blablabla"
                />
              </StyledComponent>
            </styled.input>
            <styled.span>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": true,
                      "lastClassName": "ijSPza",
                      "rules": Array [
                        "
    width: 1em;
    height: 1em;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 0.25em;
  ",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="sc-ifAKCX ijSPza"
                >
                  <EyeIcon
                    onClick={[Function]}
                    style={
                      Object {
                        "height": "1em",
                        "position": "absolute",
                        "right": "5px",
                        "top": "50%",
                        "transform": "translateY(-50%)",
                        "width": "1em",
                      }
                    }
                  >
                    <svg
                      height="1em"
                      onClick={[Function]}
                      style={
                        Object {
                          "height": "1em",
                          "position": "absolute",
                          "right": "5px",
                          "top": "50%",
                          "transform": "translateY(-50%)",
                          "width": "1em",
                        }
                      }
                      viewBox="0 0 22 22"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <g
                        fill="#4d4d4d"
                        transform="matrix(.02146 0 0 .02146 1 1)"
                      >
                        <path
                          d="m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1"
                        />
                        <circle
                          cx="466.08"
                          cy="466.02"
                          r="134.5"
                        />
                      </g>
                    </svg>
                  </EyeIcon>
                </span>
              </StyledComponent>
            </styled.span>
          </span>
          <div
            className="error"
            style={
              Object {
                "color": "red",
              }
            }
          >
            some error just happened
          </div>
        </div>
      </StyledComponent>
    </styled.div>
  </TextInput>
</PasswordInputHooks>
`;

exports[`the PasswordInput component should match the last snapshot with msg 1`] = `
<TextInput
  error="some error just happened"
  htmlId="password-input-example-all-features"
  iconSuffix={
    <EyeIcon
      onClick={[Function]}
      style={
        Object {
          "height": "1em",
          "position": "absolute",
          "right": "5px",
          "top": "50%",
          "transform": "translateY(-50%)",
          "width": "1em",
        }
      }
    />
  }
  label="Password"
  maxLength={50}
  name="password"
  onChange={[Function]}
  required={true}
  type="password"
  value="blablabla"
/>
`;
