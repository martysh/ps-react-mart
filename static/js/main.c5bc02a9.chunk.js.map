{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","utils/percentUtils.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/PlusIcon/PlusIcon.js","components/PlusIcon/index.js","components/TextInputCSSModules/TextInput.module.css","../config/componentData.js","docs/examples/EyeIcon/ExampleIcon.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/Example1.js","docs/examples/PasswordInput/Example2.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/PlusIcon/PlusExample.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/TextExample.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/TextExample.js","components/Button/Button.js","docs/examples/Button/ExampleButtons.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/PasswordInputHooks/PasswordInputHooks.js","docs/examples/PasswordInputHooks/ExampleAllFeatures.js","components/TextInputStyledC/TextInputStyledC.js","docs/examples/TextInputStyledC/Example.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","_ref","htmlFor","label","required","react_default","a","createElement","style","display","color","__webpack_require__","d","__webpack_exports__","Label_Label","getWidthAsPercentOfTotalWidth","percent","totalWidth","parseInt","ProgressBar","getColor","_this","props","_this$props","this","width","height","border","backgroundColor","React","Component","defaultProps","components_ProgressBar_ProgressBar","TextInput","htmlId","name","_ref$type","type","_ref$required","onChange","placeholder","value","error","children","iconSuffix","Object","objectWithoutProperties","Fragment","position","assign","id","className","TextInput_TextInput","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","setState","prevState","showPassword","state","maxLength","showVisibilityToggle","quality","IconSuffix","EyeIcon","onClick","top","transform","right","length","components_PasswordInput_PasswordInput","xmlns","viewBox","fill","cx","cy","r","EyeIcon_EyeIcon","PlusIcon","aria-label","stroke","strokeWidth","PlusIcon_PlusIcon","module","exports","inputError","fieldset","wrapper","description","theme","defaultValue","computed","round","primary","disabled","code","examples","message","confirmationMessage","onSubmit","minPasswordLength","EyeIconExample","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleOptional","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_1__","Example1","Example2","ExampleAllFeatures","_home_inabramova_proj_ps_react_components_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_inabramova_proj_ps_react_components_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_inabramova_proj_ps_react_components_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","target","minLength","getQuality","PlusIconExample","ps_react_PlusIcon__WEBPACK_IMPORTED_MODULE_1__","Example70Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","Example10Percent","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_1__","ExampleError","TextInputCSSModules","styles","TextInputCSSModules_TextInputCSSModules","TextInputBEM","TextInputBEM_TextInputBEM","StyledButton","styled","button","_templateObject","bgColor","fontSize","Button","mergedTheme","componentProps","objectSpread","DecoratedButton","ExampleButtons_templateObject","ExampleButtons","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","console","log","components_RegistrationForm_RegistrationForm","PasswordInputHooks","_useState","useState","_useState2","slicedToArray","togglePassword","rest","PasswordInputHooks_PasswordInputHooks","FieldSet","div","Error","_templateObject2","Input","input","_templateObject3","Wrapper","span","_templateObject4","TextInputStyledC","TextInputStyledC_TextInputStyledC","HelloWorld","ExampleHelloWorld","HelloWorld_HelloWorld","map","./Button/ExampleButtons","./Button/ExampleButtons.js","./EyeIcon/ExampleIcon","./EyeIcon/ExampleIcon.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/Example1","./PasswordInput/Example1.js","./PasswordInput/Example2","./PasswordInput/Example2.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./PasswordInputHooks/ExampleAllFeatures","./PasswordInputHooks/ExampleAllFeatures.js","./PlusIcon/PlusExample","./PlusIcon/PlusExample.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/TextExample","./TextInputBEM/TextExample.js","./TextInputCSSModules/TextExample","./TextInputCSSModules/TextExample.js","./TextInputStyledC/Example","./TextInputStyledC/Example.js","webpackContext","req","webpackContextResolve","e","keys","resolve","Navigation","components","key","href","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","preventDefault","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5bc02a9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export {default} from './Label';\n","// Returns the width of a percent of total width, as an integer\nexport function getWidthAsPercentOfTotalWidth(percent, totalWidth) {\n  return parseInt(totalWidth * (percent / 100), 10);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {getWidthAsPercentOfTotalWidth} from '../../utils/percentUtils';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: getWidthAsPercentOfTotalWidth(percent, width),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","export {default} from './ProgressBar';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout,\n * error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\",\n    required = false, onChange, placeholder,\n    value, error, children, iconSuffix, ...props}) {\n  return (\n    <>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <span style={{position:'relative', display:'inline-block'}} >\n        <input\n          id={htmlId}\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {iconSuffix}\n        </span>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input.\n   * Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to\n   * match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './TextInput';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n    const IconSuffix = showVisibilityToggle &&\n        <EyeIcon onClick={this.toggleShowPassword}\n        style={{ width: '1em', height: '1em', position: 'absolute', top: '50%', transform:'translateY(-50%)', right:'5px' }}/>;\n    return (\n        <TextInput\n          htmlId={htmlId}\n          label={label}\n          placeholder={placeholder}\n          type={showPassword ? 'text' : 'password'}\n          onChange={onChange}\n          iconSuffix={IconSuffix}\n          value={value}\n          maxLength={maxLength}\n          error={error}\n          required\n          {...props}>\n\n          {\n            value && value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n          }\n        </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","export {default} from './PasswordInput';\n","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon(props) {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","export {default} from './EyeIcon';\n","import React from 'react'\n\nfunction PlusIcon(props) {\n  return (\n    <svg  width=\"16\" height=\"16\" {...props} aria-label=\"Add\" viewBox=\"0 0 24 24\"><path fill=\"none\" stroke=\"#000\"\n      strokeWidth=\"2\" d=\"M12,22 L12,2 M2,12 L22,12\"></path></svg>\n  )\n};\n\nexport default PlusIcon;\n","export {default} from './PlusIcon';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"TextInput_error__2YVSd\",\"inputError\":\"TextInput_inputError__2WDV-\",\"fieldset\":\"TextInput_fieldset__3nRGQ\",\"wrapper\":\"TextInput_wrapper__3unUI\"};","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"Button\",\n  \"description\": \"\",\n  \"props\": {\n    \"theme\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"theme\",\n      \"defaultValue\": {\n        \"value\": \"{\\n  color: 'tomato',\\n  bgColor: 'white',\\n  fontSize: '1rem',\\n}\",\n        \"computed\": false\n      }\n    },\n    \"round\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"primary\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"disabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\n/*--primary-color : ${props => props.theme.color || 'tomato'};*/\\n/* color: var(--primary-color, ${props => props.theme.color}, 'tomato'); */\\n\\n\\nconst StyledButton = styled.button`\\n  /*  invert if primary */\\n  --primary-color: ${props=> props.primary ? props.theme.bgColor: props.theme.color};\\n  --bg-color: ${props =>  props.primary? props.theme.color : props.theme.bgColor};\\n  --border-color: ${props=> props.theme.color};\\n  --btn-font-size: ${props=> props.theme.fontSize};\\n\\n  color : var(--primary-color);\\n  background-color: var(--bg-color);\\n  border: 2px solid var( --border-color);\\n  font-size: var( --btn-font-size);\\n\\n  display: inline-flex;\\n  align-items: center;\\n  justify-content: center;\\n\\n  letter-spacing: 1px;\\n  font-weight: 700;\\n  padding: 0.3em 0.5em;\\n  border-radius: ${props => props.round ? '50%' : '3px'}\\n  &[disabled]{\\n    opacity: 0.4;\\n  }\\n`;\\n\\nconst Button = (props) => {\\n  const mergedTheme = Object.assign({}, Button.defaultProps.theme, props.theme || {});\\n  const componentProps = {...props, theme: mergedTheme};\\n  return <StyledButton {...componentProps} />\\n};\\n\\nButton.propTypes = {\\n  /** theme */\\n  theme: PropTypes.object,\\n\\n  round: PropTypes.bool,\\n  /* is primary */\\n\\n  primary: PropTypes.bool,\\n  disabled: PropTypes.bool\\n};\\n\\n\\nButton.defaultProps = {\\n  round: false,\\n  primary: false,\\n  disabled: false,\\n  theme: {\\n    color: 'tomato',\\n    bgColor: 'white',\\n    fontSize: '1rem',\\n  }\\n};\\n\\nexport default Button;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleButtons\",\n    \"description\": \"Optional Button\",\n    \"code\": \"import React from 'react';\\nimport styled from 'styled-components';\\nimport Button from 'ps-react/Button';\\nimport EyeIcon from 'ps-react/EyeIcon';\\nimport PlusIcon from 'ps-react/PlusIcon';\\n\\n\\nconst DecoratedButton = styled(Button)`\\n    margin-left 0.5em;\\n`;\\n\\n/** Optional Button */\\nexport default function ExampleButtons() {\\n  return (<>\\n    <DecoratedButton >regular</DecoratedButton>\\n    <DecoratedButton primary >primary</DecoratedButton>\\n    <DecoratedButton ><EyeIcon/></DecoratedButton>\\n    <DecoratedButton primary disabled >primary</DecoratedButton>\\n    <DecoratedButton primary theme={{color:'papayawhip', bgColor: 'purple'}} >\\n      <PlusIcon/>\\n    different</DecoratedButton>\\n    <DecoratedButton primary theme={{fontSize:'2rem'}} >large button</DecoratedButton>\\n  </>)\\n}\\n\"\n  }]\n}, {\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon(props) {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" {...props} xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleIcon\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"Syper lame hello world component\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"'World'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Syper lame hello world component */\\nfunction HelloWorld({message}) {\\n  return (\\n    <div>\\n      Hello {message}\\n    </div>\\n  )\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message:PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message:'World'\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\n\\n/** custom message */\\nfunction ExampleHelloWorld() {\\n  return (\\n    <HelloWorld message=\\\"javascript\\\" />\\n  )\\n}\\n\\nexport default ExampleHelloWorld\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Optional label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required={true} />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n    const IconSuffix = showVisibilityToggle &&\\n        <EyeIcon onClick={this.toggleShowPassword}\\n        style={{ width: '1em', height: '1em', position: 'absolute', top: '50%', transform:'translateY(-50%)', right:'5px' }}/>;\\n    return (\\n        <TextInput\\n          htmlId={htmlId}\\n          label={label}\\n          placeholder={placeholder}\\n          type={showPassword ? 'text' : 'password'}\\n          onChange={onChange}\\n          iconSuffix={IconSuffix}\\n          value={value}\\n          maxLength={maxLength}\\n          error={error}\\n          required\\n          {...props}>\\n\\n          {\\n            value && value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n          }\\n        </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"Example1\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\nfunction Example1() {\\n  return (\\n    <div>\\n      <PasswordInput htmlId=\\\"example-optional\\\"\\n      name=\\\"firstname\\\"\\n      onChange={()=> {}}/>\\n    </div>\\n  )\\n}\\n\\nexport default Example1\\n\"\n  }, {\n    \"name\": \"Example2\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\nfunction Example2() {\\n  return (\\n    <div>\\n      <PasswordInput htmlId=\\\"example2\\\"\\n      name=\\\"firstname\\\"\\n      value=\\\"somestupidpassword\\\"\\n      quality={30}\\n      showVisibilityToggle\\n      onChange={()=> {}}/>\\n    </div>\\n  )\\n}\\n\\nexport default Example2\\n\"\n  }, {\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: 'initial'\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          error=\\\"some error just happened\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInputHooks\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React, {useState} from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nfunction PasswordInputHooks (props) {\\n  const [showPassword, togglePassword] = useState(false);\\n\\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\\n  const IconSuffix = showVisibilityToggle &&\\n      <EyeIcon onClick={()=>togglePassword(!showPassword)}\\n      style={{ width: '1em', height: '1em', position: 'absolute', top: '50%', transform:'translateY(-50%)', right:'5px' }}/>;\\n  return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        iconSuffix={IconSuffix}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...rest}>\\n\\n        {\\n          value && value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n  );\\n\\n}\\n\\nPasswordInputHooks.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInputHooks.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInputHooks;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInputHooks from 'ps-react/PasswordInputHooks';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: 'initial'\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInputHooks\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          error=\\\"some error just happened\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"PlusIcon\",\n  \"description\": \"\",\n  \"code\": \"import React from 'react'\\n\\nfunction PlusIcon(props) {\\n  return (\\n    <svg  width=\\\"16\\\" height=\\\"16\\\" {...props} aria-label=\\\"Add\\\" viewBox=\\\"0 0 24 24\\\"><path fill=\\\"none\\\" stroke=\\\"#000\\\"\\n      strokeWidth=\\\"2\\\" d=\\\"M12,22 L12,2 M2,12 L22,12\\\"></path></svg>\\n  )\\n};\\n\\nexport default PlusIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"PlusExample\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport PlusIcon from 'ps-react/PlusIcon';\\n\\nexport default function PlusIconExample() {\\n  return <PlusIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport {getWidthAsPercentOfTotalWidth} from '../../utils/percentUtils';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: getWidthAsPercentOfTotalWidth(percent, width),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% Percent\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 100% Percent */\\nexport default function Example70Percent() {\\n  return (\\n    <div>\\n      <ProgressBar percent={100} width={150} height={20} />\\n    </div>\\n  )\\n}\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% Percent\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 10% Percent */\\nexport default function Example10Percent() {\\n  return (\\n    <div>\\n      <ProgressBar percent={10} width={150} height={20} />\\n    </div>\\n  )\\n}\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% Percent\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 70% Percent */\\nexport default function Example70Percent() {\\n  return (\\n    <div>\\n      <ProgressBar percent={70} width={150} height={10} />\\n    </div>\\n  )\\n}\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout,\\nerror display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input.\\nHandy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to\\nmatch object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout,\\n * error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\",\\n    required = false, onChange, placeholder,\\n    value, error, children, iconSuffix, ...props}) {\\n  return (\\n    <>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <span style={{position:'relative', display:'inline-block'}} >\\n        <input\\n          id={htmlId}\\n          type={type}\\n          name={name}\\n          placeholder={placeholder}\\n          value={value}\\n          onChange={onChange}\\n          style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {iconSuffix}\\n        </span>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input.\\n   * Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to\\n   * match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\nfunction ExampleError() {\\n  return (\\n    <div>\\n      <TextInput htmlId=\\\"example-optional\\\"\\n      required\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      error=\\\"First name is required.\\\"\\n      onChange={()=> {}}/>\\n    </div>\\n  )\\n}\\n\\nexport default ExampleError\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\nfunction ExampleOptional() {\\n  return (\\n    <div>\\n      <TextInput htmlId=\\\"example-optional\\\"\\n      label=\\\"FirstName\\\"\\n      name=\\\"firstname\\\"\\n      onChange={()=> {}}/>\\n    </div>\\n  )\\n}\\n\\nexport default ExampleOptional\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout,\\nerror display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input.\\nHandy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to\\nmatch object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout,\\n * error display, label placement, and required field marker. */\\nfunction TextInputBEM({htmlId, name, label, type = \\\"text\\\",\\n    required = false, onChange, placeholder,\\n    value, error, children, iconSuffix, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <span className=\\\"textinput__input-wrapper\\\" >\\n        <input\\n          id={htmlId}\\n          type={type}\\n          name={name}\\n          placeholder={placeholder}\\n          value={value}\\n          onChange={onChange}\\n          className={error && \\\"textinput__input--state-error\\\"}\\n        {...props}/>\\n        {iconSuffix}\\n        </span>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInputBEM.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input.\\n   * Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to\\n   * match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputBEM;\\n\",\n  \"examples\": [{\n    \"name\": \"TextExample\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout,\\nerror display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input.\\nHandy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to\\nmatch object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './TextInput.module.css';\\n\\n/** Text input with integrated label to enforce consistency in layout,\\n * error display, label placement, and required field marker. */\\nfunction TextInputCSSModules({htmlId, name, label, type = \\\"text\\\",\\n    required = false, onChange, placeholder,\\n    value, error, children, iconSuffix, ...props}) {\\n  return (\\n    <>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <span className={styles.wrapper} >\\n        <input\\n          id={htmlId}\\n          type={type}\\n          name={name}\\n          placeholder={placeholder}\\n          value={value}\\n          onChange={onChange}\\n          className={error && styles.inputError}\\n        {...props}/>\\n        {iconSuffix}\\n        </span>\\n        {children}\\n      {error && <div className={styles.error} >{error}</div>}\\n    </>\\n  );\\n};\\n\\nTextInputCSSModules.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input.\\n   * Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to\\n   * match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputCSSModules;\\n\",\n  \"examples\": [{\n    \"name\": \"TextExample\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledC\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout,\\nerror display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input.\\nHandy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to\\nmatch object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\nconst FieldSet = styled.div`\\n  margin-bottom: 16px;\\n`;\\nconst Error = styled.div`\\n  color:red;\\n`;\\nconst Input = styled.input`\\n  border: ${props=>props.error&&'solid 1px red'};\\n  display: block;\\n`;\\n\\nconst Wrapper = styled.span`\\n  position: relative;\\n  display: inline-block;\\n`;\\n\\n/** Text input with integrated label to enforce consistency in layout,\\n * error display, label placement, and required field marker. */\\nfunction TextInputStyledC({htmlId, name, label, type = \\\"text\\\",\\n    required = false, onChange, placeholder,\\n    value, error, children, iconSuffix, ...props}) {\\n  return (\\n    <FieldSet>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Wrapper >\\n        <Input\\n          id={htmlId}\\n          type={type}\\n          name={name}\\n          placeholder={placeholder}\\n          value={value}\\n          onChange={onChange}\\n        {...props}/>\\n        {iconSuffix}\\n        </Wrapper>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </FieldSet>\\n  );\\n};\\n\\nTextInputStyledC.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input.\\n   * Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to\\n   * match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputStyledC;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputStyledC from 'ps-react/TextInputStyledC';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledC\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}];","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required={true} />\n}\n","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\nfunction Example1() {\n  return (\n    <div>\n      <PasswordInput htmlId=\"example-optional\"\n      name=\"firstname\"\n      onChange={()=> {}}/>\n    </div>\n  )\n}\n\nexport default Example1\n","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\nfunction Example2() {\n  return (\n    <div>\n      <PasswordInput htmlId=\"example2\"\n      name=\"firstname\"\n      value=\"somestupidpassword\"\n      quality={30}\n      showVisibilityToggle\n      onChange={()=> {}}/>\n    </div>\n  )\n}\n\nexport default Example2\n","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: 'initial'\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          error=\"some error just happened\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport PlusIcon from 'ps-react/PlusIcon';\n\nexport default function PlusIconExample() {\n  return <PlusIcon />;\n}\n","import React from 'react';\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 100% Percent */\nexport default function Example70Percent() {\n  return (\n    <div>\n      <ProgressBar percent={100} width={150} height={20} />\n    </div>\n  )\n}\n","import React from 'react';\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 10% Percent */\nexport default function Example10Percent() {\n  return (\n    <div>\n      <ProgressBar percent={10} width={150} height={20} />\n    </div>\n  )\n}\n","import React from 'react';\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 70% Percent */\nexport default function Example70Percent() {\n  return (\n    <div>\n      <ProgressBar percent={70} width={150} height={10} />\n    </div>\n  )\n}\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\nfunction ExampleError() {\n  return (\n    <div>\n      <TextInput htmlId=\"example-optional\"\n      required\n      label=\"First Name\"\n      name=\"firstname\"\n      error=\"First name is required.\"\n      onChange={()=> {}}/>\n    </div>\n  )\n}\n\nexport default ExampleError\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\nfunction ExampleOptional() {\n  return (\n    <div>\n      <TextInput htmlId=\"example-optional\"\n      label=\"FirstName\"\n      name=\"firstname\"\n      onChange={()=> {}}/>\n    </div>\n  )\n}\n\nexport default ExampleOptional\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './TextInput.module.css';\n\n/** Text input with integrated label to enforce consistency in layout,\n * error display, label placement, and required field marker. */\nfunction TextInputCSSModules({htmlId, name, label, type = \"text\",\n    required = false, onChange, placeholder,\n    value, error, children, iconSuffix, ...props}) {\n  return (\n    <>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <span className={styles.wrapper} >\n        <input\n          id={htmlId}\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          className={error && styles.inputError}\n        {...props}/>\n        {iconSuffix}\n        </span>\n        {children}\n      {error && <div className={styles.error} >{error}</div>}\n    </>\n  );\n};\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input.\n   * Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to\n   * match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;\n","import React from 'react';\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout,\n * error display, label placement, and required field marker. */\nfunction TextInputBEM({htmlId, name, label, type = \"text\",\n    required = false, onChange, placeholder,\n    value, error, children, iconSuffix, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <span className=\"textinput__input-wrapper\" >\n        <input\n          id={htmlId}\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          className={error && \"textinput__input--state-error\"}\n        {...props}/>\n        {iconSuffix}\n        </span>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input.\n   * Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to\n   * match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n/*--primary-color : ${props => props.theme.color || 'tomato'};*/\n/* color: var(--primary-color, ${props => props.theme.color}, 'tomato'); */\n\n\nconst StyledButton = styled.button`\n  /*  invert if primary */\n  --primary-color: ${props=> props.primary ? props.theme.bgColor: props.theme.color};\n  --bg-color: ${props =>  props.primary? props.theme.color : props.theme.bgColor};\n  --border-color: ${props=> props.theme.color};\n  --btn-font-size: ${props=> props.theme.fontSize};\n\n  color : var(--primary-color);\n  background-color: var(--bg-color);\n  border: 2px solid var( --border-color);\n  font-size: var( --btn-font-size);\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  letter-spacing: 1px;\n  font-weight: 700;\n  padding: 0.3em 0.5em;\n  border-radius: ${props => props.round ? '50%' : '3px'}\n  &[disabled]{\n    opacity: 0.4;\n  }\n`;\n\nconst Button = (props) => {\n  const mergedTheme = Object.assign({}, Button.defaultProps.theme, props.theme || {});\n  const componentProps = {...props, theme: mergedTheme};\n  return <StyledButton {...componentProps} />\n};\n\nButton.propTypes = {\n  /** theme */\n  theme: PropTypes.object,\n\n  round: PropTypes.bool,\n  /* is primary */\n\n  primary: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\n\nButton.defaultProps = {\n  round: false,\n  primary: false,\n  disabled: false,\n  theme: {\n    color: 'tomato',\n    bgColor: 'white',\n    fontSize: '1rem',\n  }\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from 'ps-react/Button';\nimport EyeIcon from 'ps-react/EyeIcon';\nimport PlusIcon from 'ps-react/PlusIcon';\n\n\nconst DecoratedButton = styled(Button)`\n    margin-left 0.5em;\n`;\n\n/** Optional Button */\nexport default function ExampleButtons() {\n  return (<>\n    <DecoratedButton >regular</DecoratedButton>\n    <DecoratedButton primary >primary</DecoratedButton>\n    <DecoratedButton ><EyeIcon/></DecoratedButton>\n    <DecoratedButton primary disabled >primary</DecoratedButton>\n    <DecoratedButton primary theme={{color:'papayawhip', bgColor: 'purple'}} >\n      <PlusIcon/>\n    different</DecoratedButton>\n    <DecoratedButton primary theme={{fontSize:'2rem'}} >large button</DecoratedButton>\n  </>)\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nfunction PasswordInputHooks (props) {\n  const [showPassword, togglePassword] = useState(false);\n\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\n  const IconSuffix = showVisibilityToggle &&\n      <EyeIcon onClick={()=>togglePassword(!showPassword)}\n      style={{ width: '1em', height: '1em', position: 'absolute', top: '50%', transform:'translateY(-50%)', right:'5px' }}/>;\n  return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        iconSuffix={IconSuffix}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...rest}>\n\n        {\n          value && value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n  );\n\n}\n\nPasswordInputHooks.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInputHooks.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInputHooks;\n","import React from 'react';\nimport PasswordInputHooks from 'ps-react/PasswordInputHooks';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: 'initial'\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInputHooks\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          error=\"some error just happened\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\nconst FieldSet = styled.div`\n  margin-bottom: 16px;\n`;\nconst Error = styled.div`\n  color:red;\n`;\nconst Input = styled.input`\n  border: ${props=>props.error&&'solid 1px red'};\n  display: block;\n`;\n\nconst Wrapper = styled.span`\n  position: relative;\n  display: inline-block;\n`;\n\n/** Text input with integrated label to enforce consistency in layout,\n * error display, label placement, and required field marker. */\nfunction TextInputStyledC({htmlId, name, label, type = \"text\",\n    required = false, onChange, placeholder,\n    value, error, children, iconSuffix, ...props}) {\n  return (\n    <FieldSet>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Wrapper >\n        <Input\n          id={htmlId}\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n        {...props}/>\n        {iconSuffix}\n        </Wrapper>\n        {children}\n      {error && <Error>{error}</Error>}\n    </FieldSet>\n  );\n};\n\nTextInputStyledC.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input.\n   * Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to\n   * match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledC;\n","import React from 'react';\nimport TextInputStyledC from 'ps-react/TextInputStyledC';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledC\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Syper lame hello world component */\nfunction HelloWorld({message}) {\n  return (\n    <div>\n      Hello {message}\n    </div>\n  )\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message:PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message:'World'\n};\n\nexport default HelloWorld;\n","import React from 'react';\nimport HelloWorld from \"ps-react/HelloWorld\";\n\n/** custom message */\nfunction ExampleHelloWorld() {\n  return (\n    <HelloWorld message=\"javascript\" />\n  )\n}\n\nexport default ExampleHelloWorld\n","var map = {\n\t\"./Button/ExampleButtons\": 37,\n\t\"./Button/ExampleButtons.js\": 37,\n\t\"./EyeIcon/ExampleIcon\": 23,\n\t\"./EyeIcon/ExampleIcon.js\": 23,\n\t\"./HelloWorld/ExampleHelloWorld\": 41,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 41,\n\t\"./Label/ExampleOptional\": 24,\n\t\"./Label/ExampleOptional.js\": 24,\n\t\"./Label/ExampleRequired\": 25,\n\t\"./Label/ExampleRequired.js\": 25,\n\t\"./PasswordInput/Example1\": 26,\n\t\"./PasswordInput/Example1.js\": 26,\n\t\"./PasswordInput/Example2\": 27,\n\t\"./PasswordInput/Example2.js\": 27,\n\t\"./PasswordInput/ExampleAllFeatures\": 28,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 28,\n\t\"./PasswordInputHooks/ExampleAllFeatures\": 39,\n\t\"./PasswordInputHooks/ExampleAllFeatures.js\": 39,\n\t\"./PlusIcon/PlusExample\": 29,\n\t\"./PlusIcon/PlusExample.js\": 29,\n\t\"./ProgressBar/Example100Percent\": 30,\n\t\"./ProgressBar/Example100Percent.js\": 30,\n\t\"./ProgressBar/Example10Percent\": 31,\n\t\"./ProgressBar/Example10Percent.js\": 31,\n\t\"./ProgressBar/Example70Percent\": 32,\n\t\"./ProgressBar/Example70Percent.js\": 32,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 38,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 38,\n\t\"./TextInput/ExampleError\": 33,\n\t\"./TextInput/ExampleError.js\": 33,\n\t\"./TextInput/ExampleOptional\": 34,\n\t\"./TextInput/ExampleOptional.js\": 34,\n\t\"./TextInputBEM/TextExample\": 36,\n\t\"./TextInputBEM/TextExample.js\": 36,\n\t\"./TextInputCSSModules/TextExample\": 35,\n\t\"./TextInputCSSModules/TextExample.js\": 35,\n\t\"./TextInputStyledC/Example\": 40,\n\t\"./TextInputStyledC/Example.js\": 40\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 56;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode};\n    });\n  }\n\n  render() {\n    const {showCode} = this.state;\n    const {code, description, name} = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4> }\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })\n      }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map( example => <Example key={example.code} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({route: window.location.hash.substr(1)})\n    })\n  }\n\n  render() {\n    const {route} = this.state;\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"../node_modules/highlight.js/styles/ocean.css\";\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Docs />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}